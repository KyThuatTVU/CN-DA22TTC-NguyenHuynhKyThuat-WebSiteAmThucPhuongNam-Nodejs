const db = require('../config/database');
const fs = require('fs');
const path = require('path');

async function fixImagePaths() {
  try {
    console.log('üîß ƒêang s·ª≠a ƒë∆∞·ªùng d·∫´n h√¨nh ·∫£nh...\n');
    
    // L·∫•y t·∫•t c·∫£ m√≥n ƒÉn
    const [dishes] = await db.query('SELECT ma_mon, ten_mon, anh_mon FROM mon_an');
    
    // L·∫•y danh s√°ch file th·ª±c t·∫ø
    const imagesDir = path.join(__dirname, '../images');
    const actualFiles = fs.readdirSync(imagesDir).map(f => f.toLowerCase());
    
    let fixed = 0;
    let notFound = 0;
    
    for (const dish of dishes) {
      if (!dish.anh_mon) continue;
      
      const dbImagePath = dish.anh_mon.replace('/images/', '');
      const fullPath = path.join(imagesDir, dbImagePath);
      
      // N·∫øu file kh√¥ng t·ªìn t·∫°i, t√¨m file t∆∞∆°ng t·ª±
      if (!fs.existsSync(fullPath)) {
        const fileName = path.basename(dbImagePath).toLowerCase();
        
        // T√¨m file c√≥ t√™n g·∫ßn gi·ªëng
        const similarFile = actualFiles.find(f => {
          const similarity = f.includes(fileName.slice(0, -4)) || fileName.includes(f.slice(0, -4));
          return similarity;
        });
        
        if (similarFile) {
          const newPath = `/images/${similarFile}`;
          await db.query('UPDATE mon_an SET anh_mon = ? WHERE ma_mon = ?', [newPath, dish.ma_mon]);
          console.log(`‚úÖ ${dish.ten_mon}`);
          console.log(`   C≈©: ${dish.anh_mon}`);
          console.log(`   M·ªõi: ${newPath}\n`);
          fixed++;
        } else {
          console.log(`‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh cho: ${dish.ten_mon} (${dbImagePath})\n`);
          notFound++;
        }
      }
    }
    
    console.log(`\nüìä K·∫øt qu·∫£:`);
    console.log(`   ‚úÖ ƒê√£ s·ª≠a: ${fixed} m√≥n`);
    console.log(`   ‚ùå Kh√¥ng t√¨m th·∫•y: ${notFound} m√≥n`);
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
    process.exit(1);
  }
}

fixImagePaths();
